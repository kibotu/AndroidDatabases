ext {
    VERSION_NAME = simpleReleaseVersionName()
    VERSION_CODE = commitCount()
    isLocal = project.rootProject.file('local.properties').exists()
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'io.objectbox'
apply plugin: 'realm-android'

androidExtensions {
    experimental = true
}

kapt {
    useBuildCache = true
    arguments {
        arg("objectbox.modelPath", "$rootDir/schemas/objectbox.json")
    }
}

android {

    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        applicationId APPLICATION_ID
        multiDexEnabled true

        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode VERSION_CODE
        versionName VERSION_NAME
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$rootDir/schemas".toString()]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // region build types

    buildTypes {

        debug {
            applicationIdSuffix ""
            pseudoLocalesEnabled true
            debuggable true
            minifyEnabled false
            crunchPngs false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.alwaysUpdateBuildId = false
        }

        release {
            pseudoLocalesEnabled false
            debuggable false
            minifyEnabled true
            crunchPngs true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // endregion

    // region lint options

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false        // true by default
        checkAllWarnings false
        checkReleaseBuilds false
        ignoreWarnings true       // false by default
        quiet true                // false by default
    }

    // endregion

    // region test options

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.all {
            jvmArgs '-noverify'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
            ignoreFailures = true
        }
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    // endregion

    // region dex options

    dexOptions {
        javaMaxHeapSize "4g"
        maxProcessCount 8
    }

    // endregion

    // region adb options

    adbOptions {
        timeOutInMs 10 * 60 * 1000 // 10 minutes
    }

    // endregion

    // region exclude duplicated meta inf files

    packagingOptions {
        exclude 'META-INF/library-core_release.kotlin_module'
        exclude 'META-INF/lib_release.kotlin_module'

        pickFirst 'lib/armeabi-v7a/libc++_shared.so' // objectbox unit test
        pickFirst 'lib/arm64-v8a/libc++_shared.so' // objectbox unit test
        pickFirst 'lib/x86/libc++_shared.so' // objectbox unit test
        pickFirst 'lib/x86_64/libc++_shared.so' // objectbox unit test
    }

    // endregion
}

dependencies {

    // Core library
    androidTestImplementation androidTestLibs.testCore

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation androidTestLibs.espressoRunnerAlpha
    androidTestImplementation androidTestLibs.espressoRulesAlpha
    androidTestUtil androidTestUtilLibs.orchestrator

    // Assertions
    androidTestImplementation androidTestLibs.testJUnit
    androidTestImplementation androidTestLibs.textTruth
    androidTestImplementation androidTestLibs.truth

    // Espresso dependencies
    androidTestImplementation androidTestLibs.espressoCore
    androidTestImplementation androidTestLibs.espressoContrib
    androidTestImplementation androidTestLibs.espressoIntents
    androidTestImplementation androidTestLibs.espressoAccessibility
    androidTestImplementation androidTestLibs.espressoWeb
    androidTestImplementation androidTestLibs.idlingConcurrent
    androidTestImplementation androidTestLibs.espressoIdlingResource
    androidTestImplementation androidTestLibs.fragmentTesting

    testImplementation testLibs.junit
    testImplementation testLibs.jsonAssert
    testImplementation testLibs.jsonUnit
    testImplementation testLibs.jsonUnitFluent
    testImplementation testLibs.robolectricSnapshot
    testImplementation testLibs.truth
    testImplementation androidTestLibs.testCore
    testImplementation androidTestLibs.kotlinxCoroutinesTest
    testImplementation androidTestLibs.coreTesting

    androidTestImplementation androidTestLibs.mockitoAndroid
    testImplementation testLibs.mockitoCore
    testImplementation testLibs.powermockModuleJunit4
    testImplementation testLibs.powermockModuleJunit4Rule
    testImplementation testLibs.powermockApiMockito2
    testImplementation testLibs.powermockClassloadingXstream

    implementation libs.kotlinJdk8
    implementation libs.supportMultidex
    implementation libs.supportAppCompat
    implementation libs.appCompatResources
    implementation libs.supportDesign
    implementation libs.constraintLayout
    implementation libs.androidKtx

    // viewmodel and lifecycle
    implementation libs.lifecycleExtensions
    implementation libs.lifecycleViewmodel
    implementation libs.lifecycleLivedata
    kapt libs.lifecycleCompiler
    implementation libs.lifecycleRuntime
    implementation libs.lifecycleRuntimeKtx
    implementation libs.lifecycleLivedataKtx
    implementation libs.androidKtxLifecycleViewmodel

    // pagination
    implementation libs.pagingRuntimeKtx

    implementation libs.gson
    implementation libs.rx2java
    implementation libs.rx2Android

    implementation libs.exozetCore
    implementation libs.logger
    implementation libs.recyclerViewPresenter4
    implementation libs.recyclerviewAnimators
    implementation libs.polet

    // room
    androidTestImplementation androidTestLibs.roomTesting

    implementation libs.persistenceRoomRuntime
    implementation libs.androidRoomKtx
    kapt libs.persistenceRoomCompiler
}

// region override support library version

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'
    resolutionStrategy.force libs.kotlinJdk8
    resolutionStrategy.force libs.supportAppCompat
    resolutionStrategy.force libs.appCompatResources
    resolutionStrategy.force libs.constraintLayout

    resolutionStrategy.force androidTestLibs.findBugs
    resolutionStrategy.force androidTestLibs.checkerCompatQual
    resolutionStrategy.force androidTestLibs.checkerQual
    resolutionStrategy.force androidTestLibs.errorProneAnnotations
    resolutionStrategy.force androidTestLibs.guavaListenablefuture
}

// endregion
